package expo.modules.updates.errorrecovery;

import java.lang.System;

/**
 * Entry point for the error recovery flow. Responsible for initializing the error recovery handler
 * and handler thread, and for registering (and unregistering) listeners to lifecycle events so that
 * the appropriate error recovery flows will be triggered.
 *
 * The error recovery flow is intended to be lightweight and is *not* a full safety net whose
 * purpose is to avoid crashes at all costs. Rather, its primary purpose is to prevent bad updates
 * from "bricking" an app by causing crashes before there is ever a chance to download a fix.
 *
 * Notably, the error listener will be unregistered 10 seconds after content has appeared; we assume
 * that by this point, expo-updates has had enough time to download a new update if there is one,
 * and so there is no more need to trigger the error recovery pipeline.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000^\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0007\u0018\u0000 +2\u00020\u0001:\u0001+B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u00a2\u0006\u0002\u0010\u0004J\r\u0010\u0018\u001a\u00020\u0019H\u0000\u00a2\u0006\u0002\b\u001aJ\u0019\u0010\u001b\u001a\u00020\u00192\n\u0010\u001c\u001a\u00060\u001dj\u0002`\u001eH\u0000\u00a2\u0006\u0002\b\u001fJ\u000e\u0010 \u001a\u00020\u00192\u0006\u0010!\u001a\u00020\"J\u000e\u0010#\u001a\u00020\u00192\u0006\u0010$\u001a\u00020%J\b\u0010&\u001a\u00020\u0019H\u0002J\u0010\u0010\'\u001a\u00020\u00192\u0006\u0010(\u001a\u00020\u0017H\u0002J\u000e\u0010)\u001a\u00020\u00192\u0006\u0010(\u001a\u00020\u0017J\b\u0010*\u001a\u00020\u0019H\u0002R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u001a\u0010\u0005\u001a\u00020\u0006X\u0080.\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\u0007\u0010\b\"\u0004\b\t\u0010\nR\u0014\u0010\u000b\u001a\u00020\fX\u0080\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u0014\u0010\u000f\u001a\u00020\u0010X\u0080\u0004\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u0010\u0010\u0013\u001a\u0004\u0018\u00010\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0016\u0010\u0015\u001a\n\u0012\u0004\u0012\u00020\u0017\u0018\u00010\u0016X\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006,"}, d2 = {"Lexpo/modules/updates/errorrecovery/ErrorRecovery;", "", "context", "Landroid/content/Context;", "(Landroid/content/Context;)V", "handler", "Landroid/os/Handler;", "getHandler$expo_updates_release", "()Landroid/os/Handler;", "setHandler$expo_updates_release", "(Landroid/os/Handler;)V", "handlerThread", "Landroid/os/HandlerThread;", "getHandlerThread$expo_updates_release", "()Landroid/os/HandlerThread;", "logger", "Lexpo/modules/updates/logging/UpdatesLogger;", "getLogger$expo_updates_release", "()Lexpo/modules/updates/logging/UpdatesLogger;", "previousExceptionHandler", "Lcom/facebook/react/bridge/DefaultJSExceptionHandler;", "weakReactInstanceManager", "Ljava/lang/ref/WeakReference;", "Lcom/facebook/react/ReactInstanceManager;", "handleContentAppeared", "", "handleContentAppeared$expo_updates_release", "handleException", "exception", "Ljava/lang/Exception;", "Lkotlin/Exception;", "handleException$expo_updates_release", "initialize", "delegate", "Lexpo/modules/updates/errorrecovery/ErrorRecoveryDelegate;", "notifyNewRemoteLoadStatus", "newStatus", "Lexpo/modules/updates/errorrecovery/ErrorRecoveryDelegate$RemoteLoadStatus;", "registerContentAppearedListener", "registerErrorHandler", "reactInstanceManager", "startMonitoring", "unregisterErrorHandler", "Companion", "expo-updates_release"})
public final class ErrorRecovery {
    private final android.content.Context context = null;
    @org.jetbrains.annotations.NotNull
    private final android.os.HandlerThread handlerThread = null;
    public android.os.Handler handler;
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.logging.UpdatesLogger logger = null;
    private java.lang.ref.WeakReference<com.facebook.react.ReactInstanceManager> weakReactInstanceManager;
    private com.facebook.react.bridge.DefaultJSExceptionHandler previousExceptionHandler;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.errorrecovery.ErrorRecovery.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    public ErrorRecovery(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    public final android.os.HandlerThread getHandlerThread$expo_updates_release() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final android.os.Handler getHandler$expo_updates_release() {
        return null;
    }
    
    public final void setHandler$expo_updates_release(@org.jetbrains.annotations.NotNull
    android.os.Handler p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.logging.UpdatesLogger getLogger$expo_updates_release() {
        return null;
    }
    
    public final void initialize(@org.jetbrains.annotations.NotNull
    expo.modules.updates.errorrecovery.ErrorRecoveryDelegate delegate) {
    }
    
    public final void startMonitoring(@org.jetbrains.annotations.NotNull
    com.facebook.react.ReactInstanceManager reactInstanceManager) {
    }
    
    public final void notifyNewRemoteLoadStatus(@org.jetbrains.annotations.NotNull
    expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus newStatus) {
    }
    
    public final void handleException$expo_updates_release(@org.jetbrains.annotations.NotNull
    java.lang.Exception exception) {
    }
    
    public final void handleContentAppeared$expo_updates_release() {
    }
    
    private final void registerContentAppearedListener() {
    }
    
    private final void registerErrorHandler(com.facebook.react.ReactInstanceManager reactInstanceManager) {
    }
    
    private final void unregisterErrorHandler() {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/errorrecovery/ErrorRecovery$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_release"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}