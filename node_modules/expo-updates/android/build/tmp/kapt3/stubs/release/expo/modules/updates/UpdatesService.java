package expo.modules.updates;

import java.lang.System;

/**
 * Internal module whose purpose is to connect [UpdatesModule] with the central updates entry point.
 * In most apps, this is [UpdatesController].
 *
 * In other cases, this module can be overridden at runtime to redirect [UpdatesModule] to a
 * different entry point. This is the case in Expo Go, where this module is overridden by
 * [UpdatesBinding] in order to get data from [ExpoUpdatesAppLoader].
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000~\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\b\u0006\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\u0006\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0010 \n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\b\u0016\u0018\u0000 ;2\u00020\u00012\u00020\u0002:\u0001;B\r\u0012\u0006\u0010\u0003\u001a\u00020\u0004\u00a2\u0006\u0002\u0010\u0005J\b\u00102\u001a\u00020\u001eH\u0016J\u0012\u00103\u001a\f\u0012\b\u0012\u0006\u0012\u0002\b\u00030504H\u0016J\u0010\u00106\u001a\u0002072\u0006\u00108\u001a\u000209H\u0016J\b\u0010:\u001a\u000207H\u0016R\u0014\u0010\u0006\u001a\u00020\u00078VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\b\u0010\tR\u001a\u0010\u0003\u001a\u00020\u0004X\u0084\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b\n\u0010\u000b\"\u0004\b\f\u0010\u0005R\u0014\u0010\r\u001a\u00020\u000e8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u000f\u0010\u0010R\u0016\u0010\u0011\u001a\u0004\u0018\u00010\u00128VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0013\u0010\u0014R\u0016\u0010\u0015\u001a\u0004\u0018\u00010\u00168VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u0017\u0010\u0018R\u0014\u0010\u0019\u001a\u00020\u001a8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u001b\u0010\u001cR\u0014\u0010\u001d\u001a\u00020\u001e8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b\u001d\u0010\u001fR\u0014\u0010 \u001a\u00020\u001e8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b \u0010\u001fR\u0014\u0010!\u001a\u00020\u001e8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b!\u0010\u001fR\u0016\u0010\"\u001a\u0004\u0018\u00010\u00168VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b#\u0010\u0018R\"\u0010$\u001a\u0010\u0012\u0004\u0012\u00020&\u0012\u0004\u0012\u00020\'\u0018\u00010%8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b(\u0010)R\u0014\u0010*\u001a\u00020+8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b,\u0010-R\u0016\u0010.\u001a\u0004\u0018\u00010/8VX\u0096\u0004\u00a2\u0006\u0006\u001a\u0004\b0\u00101\u00a8\u0006<"}, d2 = {"Lexpo/modules/updates/UpdatesService;", "Lexpo/modules/core/interfaces/InternalModule;", "Lexpo/modules/updates/UpdatesInterface;", "context", "Landroid/content/Context;", "(Landroid/content/Context;)V", "configuration", "Lexpo/modules/updates/UpdatesConfiguration;", "getConfiguration", "()Lexpo/modules/updates/UpdatesConfiguration;", "getContext", "()Landroid/content/Context;", "setContext", "databaseHolder", "Lexpo/modules/updates/db/DatabaseHolder;", "getDatabaseHolder", "()Lexpo/modules/updates/db/DatabaseHolder;", "directory", "Ljava/io/File;", "getDirectory", "()Ljava/io/File;", "embeddedUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "getEmbeddedUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "getFileDownloader", "()Lexpo/modules/updates/loader/FileDownloader;", "isEmbeddedLaunch", "", "()Z", "isEmergencyLaunch", "isUsingEmbeddedAssets", "launchedUpdate", "getLaunchedUpdate", "localAssetFiles", "", "Lexpo/modules/updates/db/entity/AssetEntity;", "", "getLocalAssetFiles", "()Ljava/util/Map;", "selectionPolicy", "Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "getSelectionPolicy", "()Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "stateMachine", "Lexpo/modules/updates/statemachine/UpdatesStateMachine;", "getStateMachine", "()Lexpo/modules/updates/statemachine/UpdatesStateMachine;", "canRelaunch", "getExportedInterfaces", "", "Ljava/lang/Class;", "relaunchReactApplication", "", "callback", "Lexpo/modules/updates/launcher/Launcher$LauncherCallback;", "resetSelectionPolicy", "Companion", "expo-updates_release"})
public class UpdatesService implements expo.modules.core.interfaces.InternalModule, expo.modules.updates.UpdatesInterface {
    @org.jetbrains.annotations.NotNull
    private android.content.Context context;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.UpdatesService.Companion Companion = null;
    private static final java.lang.String TAG = null;
    
    public UpdatesService(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    protected final android.content.Context getContext() {
        return null;
    }
    
    protected final void setContext(@org.jetbrains.annotations.NotNull
    android.content.Context p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public java.util.List<java.lang.Class<?>> getExportedInterfaces() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public expo.modules.updates.UpdatesConfiguration getConfiguration() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public expo.modules.updates.selectionpolicy.SelectionPolicy getSelectionPolicy() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.io.File getDirectory() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public expo.modules.updates.loader.FileDownloader getFileDownloader() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    @java.lang.Override
    public expo.modules.updates.db.DatabaseHolder getDatabaseHolder() {
        return null;
    }
    
    @java.lang.Override
    public boolean isEmergencyLaunch() {
        return false;
    }
    
    @java.lang.Override
    public boolean isEmbeddedLaunch() {
        return false;
    }
    
    @java.lang.Override
    public boolean isUsingEmbeddedAssets() {
        return false;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public expo.modules.updates.statemachine.UpdatesStateMachine getStateMachine() {
        return null;
    }
    
    @java.lang.Override
    public boolean canRelaunch() {
        return false;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public expo.modules.updates.db.entity.UpdateEntity getEmbeddedUpdate() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public expo.modules.updates.db.entity.UpdateEntity getLaunchedUpdate() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    @java.lang.Override
    public java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> getLocalAssetFiles() {
        return null;
    }
    
    @java.lang.Override
    public void relaunchReactApplication(@org.jetbrains.annotations.NotNull
    expo.modules.updates.launcher.Launcher.LauncherCallback callback) {
    }
    
    @java.lang.Override
    public void resetSelectionPolicy() {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u0014\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u0006"}, d2 = {"Lexpo/modules/updates/UpdatesService$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "expo-updates_release"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
    }
}