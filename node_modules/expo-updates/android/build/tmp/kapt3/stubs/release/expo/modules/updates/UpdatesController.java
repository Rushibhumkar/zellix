package expo.modules.updates;

import java.lang.System;

/**
 * Main entry point to expo-updates in normal release builds (development clients, including Expo
 * Go, use a different entry point). Singleton that keeps track of updates state, holds references
 * to instances of other updates classes, and is the central hub for all updates-related tasks.
 *
 * The `start` method in this class should be invoked early in the application lifecycle, via
 * [UpdatesPackage]. It delegates to an instance of [LoaderTask] to start the process of loading and
 * launching an update, then responds appropriately depending on the callbacks that are invoked.
 *
 * This class also provides getter methods to access information about the updates state, which are
 * used by the exported [UpdatesModule] through [UpdatesService]. Such information includes
 * references to: the database, the [UpdatesConfiguration] object, the path on disk to the updates
 * directory, any currently active [LoaderTask], the current [SelectionPolicy], the error recovery
 * handler, and the current launched update. This class is intended to be the source of truth for
 * these objects, so other classes shouldn't retain any of them indefinitely.
 *
 * This class also optionally holds a reference to the app's [ReactNativeHost], which allows
 * expo-updates to reload JS and send events through the bridge.
 */
@kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u0000\u00e0\u0001\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0010\u000b\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0005\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0003\n\u0002\u0018\u0002\n\u0002\b\b\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\t\u0018\u0000 x2\u00020\u0001:\u0001xB\u0017\b\u0002\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\u0006\u0010\u0004\u001a\u00020\u0005\u00a2\u0006\u0002\u0010\u0006J\u0006\u0010W\u001a\u00020XJ\b\u0010Y\u001a\u00020ZH\u0002J\u0010\u0010[\u001a\u00020Z2\u0006\u0010\u0002\u001a\u00020\u0003H\u0002J\b\u0010\\\u001a\u00020ZH\u0002J\u000e\u0010]\u001a\u00020Z2\u0006\u0010^\u001a\u00020_J\u0010\u0010`\u001a\u00020Z2\u0006\u0010\u0002\u001a\u00020\u0003H\u0002J\u0016\u0010a\u001a\u00020Z2\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010b\u001a\u00020cJ \u0010a\u001a\u00020Z2\u0006\u0010\u0002\u001a\u00020\u00032\u0006\u0010d\u001a\u00020\u001c2\u0006\u0010b\u001a\u00020cH\u0002J\u0006\u0010e\u001a\u00020ZJ\u0006\u0010f\u001a\u00020ZJ\u0006\u0010g\u001a\u00020ZJ\"\u0010h\u001a\u00020Z2\u0006\u0010i\u001a\u00020\b2\u0006\u0010j\u001a\u00020\b2\b\u0010k\u001a\u0004\u0018\u00010lH\u0002J\u0018\u0010m\u001a\u00020Z2\u0006\u0010j\u001a\u00020\b2\b\u0010k\u001a\u0004\u0018\u00010lJ\u0018\u0010n\u001a\u00020Z2\u0006\u0010j\u001a\u00020o2\u0006\u0010\u0002\u001a\u00020pH\u0016J\u000e\u0010q\u001a\u00020Z2\u0006\u00109\u001a\u00020\u0014J\u0010\u0010r\u001a\u00020Z2\b\u0010(\u001a\u0004\u0018\u00010)J\u0010\u0010s\u001a\u00020Z2\b\u00109\u001a\u0004\u0018\u00010\u0014J\u000e\u0010t\u001a\u00020Z2\u0006\u00104\u001a\u000206J\u0010\u0010u\u001a\u00020Z2\u0006\u0010v\u001a\u000208H\u0002J\u000e\u0010w\u001a\u00020Z2\u0006\u0010\u0002\u001a\u00020\u0003R\u0013\u0010\u0007\u001a\u0004\u0018\u00010\b8F\u00a2\u0006\u0006\u001a\u0004\b\t\u0010\nR\u000e\u0010\u000b\u001a\u00020\fX\u0082.\u00a2\u0006\u0002\n\u0000R\u000e\u0010\r\u001a\u00020\u000eX\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0011\u0010\u000f\u001a\u00020\u0010\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u000e\u0010\u0013\u001a\u00020\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0015\u001a\u00020\u0016X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0011\u0010\u0017\u001a\u00020\u0018\u00a2\u0006\b\n\u0000\u001a\u0004\b\u0019\u0010\u001aR\u001e\u0010\u001d\u001a\u00020\u001c2\u0006\u0010\u001b\u001a\u00020\u001c@BX\u0086\u000e\u00a2\u0006\b\n\u0000\u001a\u0004\b\u001d\u0010\u001eR\u000e\u0010\u001f\u001a\u00020\u001cX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u0010 \u001a\u00020\u001cX\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0011\u0010!\u001a\u00020\u001c8F\u00a2\u0006\u0006\u001a\u0004\b!\u0010\u001eR\u0013\u0010\"\u001a\u0004\u0018\u00010\b8F\u00a2\u0006\u0006\u001a\u0004\b#\u0010\nR\u0013\u0010$\u001a\u0004\u0018\u00010%8F\u00a2\u0006\u0006\u001a\u0004\b&\u0010\'R\u0010\u0010(\u001a\u0004\u0018\u00010)X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010*\u001a\u0004\u0018\u00010+X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u001f\u0010,\u001a\u0010\u0012\u0004\u0012\u00020.\u0012\u0004\u0012\u00020\b\u0018\u00010-8F\u00a2\u0006\u0006\u001a\u0004\b/\u00100R\u000e\u00101\u001a\u000202X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u0010\u00103\u001a\u0004\u0018\u00010\u0014X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0016\u00104\u001a\n\u0012\u0004\u0012\u000206\u0018\u000105X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u000e\u00107\u001a\u000208X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0011\u00109\u001a\u00020\u00148F\u00a2\u0006\u0006\u001a\u0004\b:\u0010;R\u001a\u0010<\u001a\u00020=X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\b>\u0010?\"\u0004\b@\u0010AR\u0013\u0010B\u001a\u0004\u0018\u00010C8F\u00a2\u0006\u0006\u001a\u0004\bD\u0010ER\u001a\u0010\u0004\u001a\u00020\u0005X\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\bF\u0010G\"\u0004\bH\u0010IR\u001c\u0010J\u001a\u0004\u0018\u00010KX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\bL\u0010M\"\u0004\bN\u0010OR\"\u0010P\u001a\n\u0018\u00010Qj\u0004\u0018\u0001`RX\u0086\u000e\u00a2\u0006\u000e\n\u0000\u001a\u0004\bS\u0010T\"\u0004\bU\u0010V\u00a8\u0006y"}, d2 = {"Lexpo/modules/updates/UpdatesController;", "Lexpo/modules/updates/statemachine/UpdatesStateChangeEventSender;", "context", "Landroid/content/Context;", "updatesConfiguration", "Lexpo/modules/updates/UpdatesConfiguration;", "(Landroid/content/Context;Lexpo/modules/updates/UpdatesConfiguration;)V", "bundleAssetName", "", "getBundleAssetName", "()Ljava/lang/String;", "databaseHandler", "Landroid/os/Handler;", "databaseHandlerThread", "Landroid/os/HandlerThread;", "databaseHolder", "Lexpo/modules/updates/db/DatabaseHolder;", "getDatabaseHolder", "()Lexpo/modules/updates/db/DatabaseHolder;", "defaultSelectionPolicy", "Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "errorRecovery", "Lexpo/modules/updates/errorrecovery/ErrorRecovery;", "fileDownloader", "Lexpo/modules/updates/loader/FileDownloader;", "getFileDownloader", "()Lexpo/modules/updates/loader/FileDownloader;", "<set-?>", "", "isEmergencyLaunch", "()Z", "isLoaderTaskFinished", "isStarted", "isUsingEmbeddedAssets", "launchAssetFile", "getLaunchAssetFile", "launchedUpdate", "Lexpo/modules/updates/db/entity/UpdateEntity;", "getLaunchedUpdate", "()Lexpo/modules/updates/db/entity/UpdateEntity;", "launcher", "Lexpo/modules/updates/launcher/Launcher;", "loaderTask", "Lexpo/modules/updates/loader/LoaderTask;", "localAssetFiles", "", "Lexpo/modules/updates/db/entity/AssetEntity;", "getLocalAssetFiles", "()Ljava/util/Map;", "logger", "Lexpo/modules/updates/logging/UpdatesLogger;", "mSelectionPolicy", "reactNativeHost", "Ljava/lang/ref/WeakReference;", "Lcom/facebook/react/ReactNativeHost;", "remoteLoadStatus", "Lexpo/modules/updates/errorrecovery/ErrorRecoveryDelegate$RemoteLoadStatus;", "selectionPolicy", "getSelectionPolicy", "()Lexpo/modules/updates/selectionpolicy/SelectionPolicy;", "stateMachine", "Lexpo/modules/updates/statemachine/UpdatesStateMachine;", "getStateMachine", "()Lexpo/modules/updates/statemachine/UpdatesStateMachine;", "setStateMachine", "(Lexpo/modules/updates/statemachine/UpdatesStateMachine;)V", "updateUrl", "Landroid/net/Uri;", "getUpdateUrl", "()Landroid/net/Uri;", "getUpdatesConfiguration", "()Lexpo/modules/updates/UpdatesConfiguration;", "setUpdatesConfiguration", "(Lexpo/modules/updates/UpdatesConfiguration;)V", "updatesDirectory", "Ljava/io/File;", "getUpdatesDirectory", "()Ljava/io/File;", "setUpdatesDirectory", "(Ljava/io/File;)V", "updatesDirectoryException", "Ljava/lang/Exception;", "Lkotlin/Exception;", "getUpdatesDirectoryException", "()Ljava/lang/Exception;", "setUpdatesDirectoryException", "(Ljava/lang/Exception;)V", "getDatabase", "Lexpo/modules/updates/db/UpdatesDatabase;", "initializeDatabaseHandler", "", "initializeErrorRecovery", "notifyController", "onDidCreateReactInstanceManager", "reactInstanceManager", "Lcom/facebook/react/ReactInstanceManager;", "purgeUpdatesLogsOlderThanOneDay", "relaunchReactApplication", "callback", "Lexpo/modules/updates/launcher/Launcher$LauncherCallback;", "shouldRunReaper", "releaseDatabase", "resetSelectionPolicyToDefault", "runReaper", "sendEventToJS", "eventName", "eventType", "params", "Lcom/facebook/react/bridge/WritableMap;", "sendLegacyUpdateEventToJS", "sendUpdateStateChangeEventToBridge", "Lexpo/modules/updates/statemachine/UpdatesStateEventType;", "Lexpo/modules/updates/statemachine/UpdatesStateContext;", "setDefaultSelectionPolicy", "setLauncher", "setNextSelectionPolicy", "setReactNativeHost", "setRemoteLoadStatus", "status", "start", "Companion", "expo-updates_release"})
public final class UpdatesController implements expo.modules.updates.statemachine.UpdatesStateChangeEventSender {
    @org.jetbrains.annotations.NotNull
    private expo.modules.updates.UpdatesConfiguration updatesConfiguration;
    private java.lang.ref.WeakReference<com.facebook.react.ReactNativeHost> reactNativeHost;
    @org.jetbrains.annotations.Nullable
    private java.io.File updatesDirectory;
    @org.jetbrains.annotations.Nullable
    private java.lang.Exception updatesDirectoryException;
    @org.jetbrains.annotations.NotNull
    private expo.modules.updates.statemachine.UpdatesStateMachine stateMachine;
    private expo.modules.updates.launcher.Launcher launcher;
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.db.DatabaseHolder databaseHolder = null;
    private final android.os.HandlerThread databaseHandlerThread = null;
    private android.os.Handler databaseHandler;
    private final expo.modules.updates.logging.UpdatesLogger logger = null;
    private boolean isStarted = false;
    private expo.modules.updates.loader.LoaderTask loaderTask;
    private expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus remoteLoadStatus = expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus.IDLE;
    private expo.modules.updates.selectionpolicy.SelectionPolicy mSelectionPolicy;
    private expo.modules.updates.selectionpolicy.SelectionPolicy defaultSelectionPolicy;
    @org.jetbrains.annotations.NotNull
    private final expo.modules.updates.loader.FileDownloader fileDownloader = null;
    private final expo.modules.updates.errorrecovery.ErrorRecovery errorRecovery = null;
    private boolean isLoaderTaskFinished = false;
    private boolean isEmergencyLaunch = false;
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.UpdatesController.Companion Companion = null;
    private static final java.lang.String TAG = null;
    private static final java.lang.String UPDATE_AVAILABLE_EVENT = "updateAvailable";
    private static final java.lang.String UPDATE_NO_UPDATE_AVAILABLE_EVENT = "noUpdateAvailable";
    private static final java.lang.String UPDATE_ERROR_EVENT = "error";
    private static final java.lang.String UPDATES_EVENT_NAME = "Expo.nativeUpdatesEvent";
    private static final java.lang.String UPDATES_STATE_CHANGE_EVENT_NAME = "Expo.nativeUpdatesStateChangeEvent";
    private static expo.modules.updates.UpdatesController singletonInstance;
    private static expo.modules.updates.UpdatesConfiguration overrideConfiguration;
    
    private UpdatesController(android.content.Context context, expo.modules.updates.UpdatesConfiguration updatesConfiguration) {
        super();
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.UpdatesConfiguration getUpdatesConfiguration() {
        return null;
    }
    
    public final void setUpdatesConfiguration(@org.jetbrains.annotations.NotNull
    expo.modules.updates.UpdatesConfiguration p0) {
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.io.File getUpdatesDirectory() {
        return null;
    }
    
    public final void setUpdatesDirectory(@org.jetbrains.annotations.Nullable
    java.io.File p0) {
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.Exception getUpdatesDirectoryException() {
        return null;
    }
    
    public final void setUpdatesDirectoryException(@org.jetbrains.annotations.Nullable
    java.lang.Exception p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.statemachine.UpdatesStateMachine getStateMachine() {
        return null;
    }
    
    public final void setStateMachine(@org.jetbrains.annotations.NotNull
    expo.modules.updates.statemachine.UpdatesStateMachine p0) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.db.DatabaseHolder getDatabaseHolder() {
        return null;
    }
    
    private final void initializeDatabaseHandler() {
    }
    
    private final void purgeUpdatesLogsOlderThanOneDay(android.content.Context context) {
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.loader.FileDownloader getFileDownloader() {
        return null;
    }
    
    private final void setRemoteLoadStatus(expo.modules.updates.errorrecovery.ErrorRecoveryDelegate.RemoteLoadStatus status) {
    }
    
    public final boolean isEmergencyLaunch() {
        return false;
    }
    
    public final void onDidCreateReactInstanceManager(@org.jetbrains.annotations.NotNull
    com.facebook.react.ReactInstanceManager reactInstanceManager) {
    }
    
    /**
     * If UpdatesController.initialize() is not provided with a [ReactApplication], this method
     * can be used to set a [ReactNativeHost] on the class. This is optional, but required in
     * order for `Updates.reload()` and some Updates module events to work.
     * @param reactNativeHost the ReactNativeHost of the application running the Updates module
     */
    public final void setReactNativeHost(@org.jetbrains.annotations.NotNull
    com.facebook.react.ReactNativeHost reactNativeHost) {
    }
    
    @org.jetbrains.annotations.Nullable
    @kotlin.jvm.Synchronized
    public final synchronized java.lang.String getLaunchAssetFile() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.lang.String getBundleAssetName() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final java.util.Map<expo.modules.updates.db.entity.AssetEntity, java.lang.String> getLocalAssetFiles() {
        return null;
    }
    
    public final boolean isUsingEmbeddedAssets() {
        return false;
    }
    
    /**
     * Any process that calls this *must* manually release the lock by calling `releaseDatabase()` in
     * every possible case (success, error) as soon as it is finished.
     */
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.db.UpdatesDatabase getDatabase() {
        return null;
    }
    
    public final void releaseDatabase() {
    }
    
    @org.jetbrains.annotations.Nullable
    public final android.net.Uri getUpdateUrl() {
        return null;
    }
    
    @org.jetbrains.annotations.Nullable
    public final expo.modules.updates.db.entity.UpdateEntity getLaunchedUpdate() {
        return null;
    }
    
    @org.jetbrains.annotations.NotNull
    public final expo.modules.updates.selectionpolicy.SelectionPolicy getSelectionPolicy() {
        return null;
    }
    
    /**
     * For external modules that want to modify the selection policy used at runtime.
     *
     * This method does not provide any guarantees about how long the provided selection policy will
     * persist; sometimes expo-updates will reset the selection policy in situations where it makes
     * sense to have explicit control (e.g. if the developer/user has programmatically fetched an
     * update, expo-updates will reset the selection policy so the new update is launched on th
     * next reload).
     * @param selectionPolicy The SelectionPolicy to use next, until overridden by expo-updates
     */
    public final void setNextSelectionPolicy(@org.jetbrains.annotations.Nullable
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy) {
    }
    
    public final void resetSelectionPolicyToDefault() {
    }
    
    public final void setDefaultSelectionPolicy(@org.jetbrains.annotations.NotNull
    expo.modules.updates.selectionpolicy.SelectionPolicy selectionPolicy) {
    }
    
    public final void setLauncher(@org.jetbrains.annotations.Nullable
    expo.modules.updates.launcher.Launcher launcher) {
    }
    
    /**
     * Starts the update process to launch a previously-loaded update and (if configured to do so)
     * check for a new update from the server. This method should be called as early as possible in
     * the application's lifecycle.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    @kotlin.jvm.Synchronized
    public final synchronized void start(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
    }
    
    @kotlin.jvm.Synchronized
    private final synchronized void notifyController() {
    }
    
    private final void initializeErrorRecovery(android.content.Context context) {
    }
    
    public final void runReaper() {
    }
    
    public final void relaunchReactApplication(@org.jetbrains.annotations.NotNull
    android.content.Context context, @org.jetbrains.annotations.NotNull
    expo.modules.updates.launcher.Launcher.LauncherCallback callback) {
    }
    
    private final void relaunchReactApplication(android.content.Context context, boolean shouldRunReaper, expo.modules.updates.launcher.Launcher.LauncherCallback callback) {
    }
    
    @java.lang.Override
    public void sendUpdateStateChangeEventToBridge(@org.jetbrains.annotations.NotNull
    expo.modules.updates.statemachine.UpdatesStateEventType eventType, @org.jetbrains.annotations.NotNull
    expo.modules.updates.statemachine.UpdatesStateContext context) {
    }
    
    public final void sendLegacyUpdateEventToJS(@org.jetbrains.annotations.NotNull
    java.lang.String eventType, @org.jetbrains.annotations.Nullable
    com.facebook.react.bridge.WritableMap params) {
    }
    
    private final void sendEventToJS(java.lang.String eventName, java.lang.String eventType, com.facebook.react.bridge.WritableMap params) {
    }
    
    @org.jetbrains.annotations.NotNull
    public static final expo.modules.updates.UpdatesController getInstance() {
        return null;
    }
    
    @kotlin.jvm.JvmStatic
    public static final void initializeWithoutStarting(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
    }
    
    /**
     * Initializes the UpdatesController singleton. This should be called as early as possible in the
     * application's lifecycle.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    @kotlin.jvm.JvmStatic
    public static final void initialize(@org.jetbrains.annotations.NotNull
    android.content.Context context) {
    }
    
    /**
     * Initializes the UpdatesController singleton. This should be called as early as possible in the
     * application's lifecycle. Use this method to set or override configuration values at runtime
     * rather than from AndroidManifest.xml.
     * @param context the base context of the application, ideally a [ReactApplication]
     */
    @kotlin.jvm.JvmStatic
    public static final void initialize(@org.jetbrains.annotations.NotNull
    android.content.Context context, @org.jetbrains.annotations.NotNull
    java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
    }
    
    /**
     * Overrides the [UpdatesConfiguration] that will be used inside [UpdatesController]
     */
    @kotlin.jvm.JvmStatic
    public static final void overrideConfiguration(@org.jetbrains.annotations.NotNull
    android.content.Context context, @org.jetbrains.annotations.NotNull
    java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
    }
    
    @kotlin.Metadata(mv = {1, 8, 0}, k = 1, d1 = {"\u00008\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0007\n\u0002\u0018\u0002\n\u0002\b\u0004\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010$\n\u0002\b\u0002\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002\u00a2\u0006\u0002\u0010\u0002J\u0010\u0010\u0013\u001a\u00020\u00142\u0006\u0010\u0015\u001a\u00020\u0016H\u0007J$\u0010\u0013\u001a\u00020\u00142\u0006\u0010\u0015\u001a\u00020\u00162\u0012\u0010\u0017\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00010\u0018H\u0007J\u0010\u0010\u0019\u001a\u00020\u00142\u0006\u0010\u0015\u001a\u00020\u0016H\u0007J$\u0010\u0010\u001a\u00020\u00142\u0006\u0010\u0015\u001a\u00020\u00162\u0012\u0010\u0017\u001a\u000e\u0012\u0004\u0012\u00020\u0004\u0012\u0004\u0012\u00020\u00010\u0018H\u0007R\u0016\u0010\u0003\u001a\n \u0005*\u0004\u0018\u00010\u00040\u0004X\u0082\u0004\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0006\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\u0007\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\b\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\t\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u000e\u0010\n\u001a\u00020\u0004X\u0082T\u00a2\u0006\u0002\n\u0000R\u001a\u0010\u000b\u001a\u00020\f8FX\u0087\u0004\u00a2\u0006\f\u0012\u0004\b\r\u0010\u0002\u001a\u0004\b\u000e\u0010\u000fR\u0010\u0010\u0010\u001a\u0004\u0018\u00010\u0011X\u0082\u000e\u00a2\u0006\u0002\n\u0000R\u0010\u0010\u0012\u001a\u0004\u0018\u00010\fX\u0082\u000e\u00a2\u0006\u0002\n\u0000\u00a8\u0006\u001a"}, d2 = {"Lexpo/modules/updates/UpdatesController$Companion;", "", "()V", "TAG", "", "kotlin.jvm.PlatformType", "UPDATES_EVENT_NAME", "UPDATES_STATE_CHANGE_EVENT_NAME", "UPDATE_AVAILABLE_EVENT", "UPDATE_ERROR_EVENT", "UPDATE_NO_UPDATE_AVAILABLE_EVENT", "instance", "Lexpo/modules/updates/UpdatesController;", "getInstance$annotations", "getInstance", "()Lexpo/modules/updates/UpdatesController;", "overrideConfiguration", "Lexpo/modules/updates/UpdatesConfiguration;", "singletonInstance", "initialize", "", "context", "Landroid/content/Context;", "configuration", "", "initializeWithoutStarting", "expo-updates_release"})
    public static final class Companion {
        
        private Companion() {
            super();
        }
        
        @kotlin.jvm.JvmStatic
        @java.lang.Deprecated
        public static void getInstance$annotations() {
        }
        
        @org.jetbrains.annotations.NotNull
        public final expo.modules.updates.UpdatesController getInstance() {
            return null;
        }
        
        @kotlin.jvm.JvmStatic
        public final void initializeWithoutStarting(@org.jetbrains.annotations.NotNull
        android.content.Context context) {
        }
        
        /**
         * Initializes the UpdatesController singleton. This should be called as early as possible in the
         * application's lifecycle.
         * @param context the base context of the application, ideally a [ReactApplication]
         */
        @kotlin.jvm.JvmStatic
        public final void initialize(@org.jetbrains.annotations.NotNull
        android.content.Context context) {
        }
        
        /**
         * Initializes the UpdatesController singleton. This should be called as early as possible in the
         * application's lifecycle. Use this method to set or override configuration values at runtime
         * rather than from AndroidManifest.xml.
         * @param context the base context of the application, ideally a [ReactApplication]
         */
        @kotlin.jvm.JvmStatic
        public final void initialize(@org.jetbrains.annotations.NotNull
        android.content.Context context, @org.jetbrains.annotations.NotNull
        java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
        }
        
        /**
         * Overrides the [UpdatesConfiguration] that will be used inside [UpdatesController]
         */
        @kotlin.jvm.JvmStatic
        public final void overrideConfiguration(@org.jetbrains.annotations.NotNull
        android.content.Context context, @org.jetbrains.annotations.NotNull
        java.util.Map<java.lang.String, ? extends java.lang.Object> configuration) {
        }
    }
}